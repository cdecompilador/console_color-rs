//! This module includes the bindings generated by `windows` crate, 
//! (should be) more standard than winapi, maintained by microsoft

#![cfg(target_family = "windows")]
use bindings::{
    Windows::Win32::SystemServices::{
        GetConsoleScreenBufferInfo,
        SetConsoleTextAttribute,
        WriteConsoleA,
        CONSOLE_SCREEN_BUFFER_INFO,
        FOREGROUND_INTENSITY,
        FOREGROUND_RED,
        FOREGROUND_GREEN,
        FOREGROUND_BLUE,
        BACKGROUND_INTENSITY,
        BACKGROUND_RED,
        BACKGROUND_GREEN,
        BACKGROUND_BLUE,
        NonClosableHandle
    },
    Windows::Win32::WindowsProgramming::{
        GetStdHandle,
        STD_HANDLE_TYPE
    }
};

use crate::color::Color;
use std::ffi::CString;

/// Raw terminal definition and implementation for windows using Win32
/// the raw terminal must implement `new` and `write`
pub struct RawTerminal {
    console_handle: NonClosableHandle,
}

impl RawTerminal {
    /// Instantiates an raw terminal
    pub fn new() -> Self {
        // Get the handle to the current terminal
        let console_handle = unsafe {
            GetStdHandle(STD_HANDLE_TYPE::STD_OUTPUT_HANDLE)
        };

        return RawTerminal {
            console_handle,
        };
    }
    
    /// Writes to the console using the Win32 api specifing the foreground and
    /// background colors
    pub fn write(&self, msg: &str, fg: Color, bg: Color)
    {
        // Create the console_info struct from the win32 api to store 
        // the old state
        let mut console_info = CONSOLE_SCREEN_BUFFER_INFO::default();
        unsafe {
            GetConsoleScreenBufferInfo(self.console_handle, &mut console_info);
        }
        dbg!(&console_info);
        // Set the correct win32 api color for the foreground and background 
        // given the `Color`
        let fg_color_enum = match fg {
            Color::None => (console_info.wAttributes & 0x000f) as u32,
            Color::Black => 0,
            Color::DarkBlue => FOREGROUND_BLUE,
            Color::DarkGreen => FOREGROUND_GREEN,
            Color::DarkCyan => FOREGROUND_GREEN | FOREGROUND_BLUE,
            Color::DarkRed => FOREGROUND_RED,
            Color::DarkMagenta => FOREGROUND_RED | FOREGROUND_BLUE,
            Color::DarkYellow => FOREGROUND_RED | FOREGROUND_GREEN,
            Color::DarkGray => FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE,
            Color::Gray => FOREGROUND_INTENSITY,
            Color::Blue => FOREGROUND_INTENSITY | FOREGROUND_BLUE,
            Color::Green => FOREGROUND_INTENSITY | FOREGROUND_GREEN,
            Color::Cyan => FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_BLUE,
            Color::Red => FOREGROUND_INTENSITY | FOREGROUND_RED,
            Color::Magenta => FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_BLUE,
            Color::Yellow => FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN,
            Color::White => FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE
        };
        let bg_color_enum = match bg {
            Color::None => (console_info.wAttributes & 0x00f0) as u32,
            Color::Black => 0,
            Color::DarkBlue => BACKGROUND_BLUE,
            Color::DarkGreen => BACKGROUND_GREEN,
            Color::DarkCyan => BACKGROUND_GREEN | BACKGROUND_BLUE,
            Color::DarkRed => BACKGROUND_RED,
            Color::DarkMagenta => BACKGROUND_RED | BACKGROUND_BLUE,
            Color::DarkYellow => BACKGROUND_RED | BACKGROUND_GREEN,
            Color::DarkGray => BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE,
            Color::Gray => BACKGROUND_INTENSITY,
            Color::Blue => BACKGROUND_INTENSITY | BACKGROUND_BLUE,
            Color::Green => BACKGROUND_INTENSITY | BACKGROUND_GREEN,
            Color::Cyan => BACKGROUND_INTENSITY | BACKGROUND_GREEN | BACKGROUND_BLUE,
            Color::Red => BACKGROUND_INTENSITY | BACKGROUND_RED,
            Color::Magenta => BACKGROUND_INTENSITY | BACKGROUND_RED | BACKGROUND_BLUE,
            Color::Yellow => BACKGROUND_INTENSITY | BACKGROUND_RED | BACKGROUND_GREEN,
            Color::White => BACKGROUND_INTENSITY | BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE
        };

        // Set a new console state with the modified foreground and background 
        // colors
        unsafe {
            SetConsoleTextAttribute(self.console_handle, 
                (fg_color_enum | bg_color_enum) as u16);
        }

        // Write the text to the console
        unsafe { 
            WriteConsoleA(self.console_handle, 
                CString::new(msg).expect("Couldn't create CString")
                    .to_bytes_with_nul().as_ptr() as *const _, 
                msg.len() as u32,
                std::ptr::null_mut(), 
                std::ptr::null_mut());
        }

        // Restore the old console attributes
        unsafe { 
            SetConsoleTextAttribute(self.console_handle, 
                console_info.wAttributes);
        }
    }
}
